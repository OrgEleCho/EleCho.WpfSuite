<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:ws="https://schemas.elecho.dev/wpfsuite"
                    xmlns:local="clr-namespace:EleCho.WpfSuite.Controls"
                    xmlns:wss="clr-namespace:EleCho.WpfSuite.Controls.States"
                    xmlns:smk="clr-namespace:EleCho.WpfSuite.Controls.States.Markup">

    <Style TargetType="{x:Type local:TextBox}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderBrush" Value="#FFABAdB3"/>
        <Setter Property="PlaceholderBrush" Value="#FFABAdB3"/>
        <Setter Property="HoverBorderBrush" Value="#FF7EB4EA"/>
        <Setter Property="FocusedBorderBrush" Value="#FF569DE5"/>
        <Setter Property="DisabledBorderBrush" Value="#d0d1d4"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>

        <Setter Property="wss:StateManager.Background" Value="{Binding RelativeSource={RelativeSource Mode=Self},Path=Background}"/>
        <Setter Property="wss:StateManager.Foreground" Value="{Binding RelativeSource={RelativeSource Mode=Self},Path=Foreground}"/>
        <Setter Property="wss:StateManager.BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=Self},Path=BorderBrush}"/>
        <Setter Property="wss:StateManager.Padding" Value="{Binding RelativeSource={RelativeSource Mode=Self},Path=Padding}"/>
        <Setter Property="wss:StateManager.BorderThickness" Value="{Binding RelativeSource={RelativeSource Mode=Self},Path=BorderThickness}"/>
        <Setter Property="wss:StateManager.CornerRadius" Value="{Binding RelativeSource={RelativeSource Mode=Self},Path=CornerRadius}"/>

        <Setter Property="wss:StateManager.DefaultTransitionDuration" Value="0:0:0.200"/>
        <Setter Property="wss:StateManager.HoverTransitionDuration" Value="0:0:0.100"/>
        <Setter Property="wss:StateManager.PressedTransitionDuration" Value="0:0:0"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:TextBox}">
                    <local:Border x:Name="border"
                                  Background="{smk:ShowingProperty Property=Background}"
                                  BorderBrush="{smk:ShowingProperty Property=BorderBrush}"
                                  Padding="{smk:ShowingProperty Property=Padding}"
                                  BorderThickness="{smk:ShowingProperty Property=BorderThickness}"
                                  CornerRadius="{smk:ShowingProperty Property=CornerRadius}"
                                  SnapsToDevicePixels="True">

                        <Grid x:Name="PART_ContentContainer">
                            <local:ScrollViewer x:Name="PART_ContentHost"
                                                Focusable="false"
                                                HorizontalScrollBarVisibility="Hidden"
                                                VerticalScrollBarVisibility="Hidden"/>
                            <Border Padding="{TemplateBinding Padding}" >
                                <TextBlock x:Name="PART_Placeholder"
                                           VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                           HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                           Text="{TemplateBinding Placeholder}"
                                           TextWrapping="{TemplateBinding TextWrapping}"
                                           Foreground="{smk:ShowingProperty Property=PlaceholderBrush}"
                                           IsHitTestVisible="False"
                                           Focusable="False"
                                           Margin="2 0 2 0"
                                           Visibility="Hidden"
                                           IsEnabled="False"/>
                            </Border>
                        </Grid>
                    </local:Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ClipToBounds" Value="True">
                            <Setter TargetName="PART_ContentContainer"
                                    Property="Clip"
                                    Value="{Binding ElementName=border,Path=ContentClip}"/>
                        </Trigger>
                        <Trigger Property="Text" Value="">
                            <Setter Property="Visibility" TargetName="PART_Placeholder" Value="Visible"/>
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="wss:StateManager.ActiveState" Value="Hover"/>
                        </Trigger>

                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="wss:StateManager.ActiveState" Value="Focused"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="wss:StateManager.ActiveState" Value="Disabled"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                    <Condition Property="IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>