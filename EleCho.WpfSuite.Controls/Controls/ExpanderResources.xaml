<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:ws="https://schemas.elecho.dev/wpfsuite"
                    xmlns:local="clr-namespace:EleCho.WpfSuite.Controls"
                    xmlns:wss="clr-namespace:EleCho.WpfSuite.Controls.States"
                    xmlns:smk="clr-namespace:EleCho.WpfSuite.Controls.States.Markup">
    <Style x:Key="ExpanderHeaderFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="0" StrokeDashArray="1 2" Stroke="Black" SnapsToDevicePixels="true" StrokeThickness="1"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type local:ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ToggleButton}">
                    <Border x:Name="border"
                            Background="{smk:ShowingProperty Property=Background}"
                            BorderBrush="{smk:ShowingProperty Property=BorderBrush}"
                            BorderThickness="{smk:ShowingProperty Property=BorderThickness}"
                            CornerRadius="{smk:ShowingProperty Property=CornerRadius}">
                        <local:BorderContentAdapter ClipToBounds="{TemplateBinding ClipToBounds}">
                            <Grid Background="Transparent" SnapsToDevicePixels="False"
                                  Margin="{smk:ShowingProperty Property=Padding}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Ellipse x:Name="circle"
                                         VerticalAlignment="Center"
                                         HorizontalAlignment="Center"
                                         Width="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderCircleDiameter}"
                                         Height="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderCircleDiameter}"
                                         wss:StateManager.Stroke="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderCircleStroke}"
                                         wss:StateManager.HoverStroke="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderCircleHoverStroke}"
                                         wss:StateManager.PressedStroke="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderCirclePressedStroke}"
                                         wss:StateManager.CheckedStroke="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderCircleCheckedStroke}"
                                         wss:StateManager.DisabledStroke="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderCircleDisabledStroke}"
                                         wss:StateManager.Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderCircleFill}"
                                         wss:StateManager.HoverFill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderCircleHoverFill}"
                                         wss:StateManager.PressedFill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderCirclePressedFill}"
                                         wss:StateManager.CheckedFill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderCircleCheckedFill}"
                                         wss:StateManager.DisabledFill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderCircleDisabledFill}"
                                         wss:StateManager.DefaultTransitionDuration="0:0:0.200"
                                         wss:StateManager.HoverTransitionDuration="0:0:0.100"
                                         wss:StateManager.PressedTransitionDuration="0:0:0"
                                         Stroke="{Binding RelativeSource={RelativeSource Mode=Self},Path=(wss:StateManager.ShowingStroke)}"
                                         Fill="{Binding RelativeSource={RelativeSource Mode=Self},Path=(wss:StateManager.ShowingFill)}"/>
                                <Path x:Name="arrow"
                                      HorizontalAlignment="Center"
                                      SnapsToDevicePixels="false"
                                      StrokeThickness="2"
                                      VerticalAlignment="Center"
                                      Data="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderArrowGeometry}"
                                      wss:StateManager.Stroke="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderArrowStroke}"
                                      wss:StateManager.HoverStroke="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderArrowHoverStroke}"
                                      wss:StateManager.PressedStroke="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderArrowPressedStroke}"
                                      wss:StateManager.CheckedStroke="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderArrowCheckedStroke}"
                                      wss:StateManager.DisabledStroke="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderArrowDisabledStroke}"
                                      wss:StateManager.DefaultTransitionDuration="0:0:0.200"
                                      wss:StateManager.HoverTransitionDuration="0:0:0.100"
                                      wss:StateManager.PressedTransitionDuration="0:0:0"
                                      Stroke="{Binding RelativeSource={RelativeSource Mode=Self},Path=(wss:StateManager.ShowingStroke)}"/>
                                <FrameworkElement x:Name="spacer"
                                                  Grid.Column="1"
                                                  Width="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderSpacing}"/>
                                <ContentPresenter x:Name="contentPresenter"
                                                  Grid.Column="2"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  RecognizesAccessKey="True" SnapsToDevicePixels="True"
                                                  TextElement.Foreground="{smk:ShowingProperty Property=Foreground}"/>
                            </Grid>
                        </local:BorderContentAdapter>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=local:Expander},Path=HeaderIconPosition}"
                                     Value="{x:Static local:ExpanderHeaderIconPosition.End}">
                            <Setter Property="Grid.Column" TargetName="circle" Value="4"/>
                            <Setter Property="Grid.Column" TargetName="arrow" Value="4"/>
                            <Setter Property="Grid.Column" TargetName="spacer" Value="3"/>
                        </DataTrigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="wss:StateManager.ActiveState" Value="Hover"/>
                            <Setter TargetName="circle" Property="wss:StateManager.ActiveState" Value="Hover"/>
                            <Setter TargetName="arrow" Property="wss:StateManager.ActiveState" Value="Hover"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="wss:StateManager.ActiveState" Value="Pressed"/>
                            <Setter TargetName="circle" Property="wss:StateManager.ActiveState" Value="Pressed"/>
                            <Setter TargetName="arrow" Property="wss:StateManager.ActiveState" Value="Pressed"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="wss:StateManager.ActiveState" Value="Checked"/>
                            <Setter TargetName="circle" Property="wss:StateManager.ActiveState" Value="Checked"/>
                            <Setter TargetName="arrow" Property="wss:StateManager.ActiveState" Value="Checked"/>
                            <Setter Property="Data" TargetName="arrow" >
                                <Setter.Value>
                                    <MultiBinding Converter="{x:Static ws:FallbackConverter.Instance}">
                                        <Binding RelativeSource="{RelativeSource Mode=FindAncestor,AncestorType=local:Expander}" Path="HeaderArrowExpandedGeometry"/>
                                        <Binding RelativeSource="{RelativeSource Mode=FindAncestor,AncestorType=local:Expander}" Path="HeaderArrowGeometry"/>
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="wss:StateManager.ActiveState" Value="Disabled"/>
                            <Setter TargetName="circle" Property="wss:StateManager.ActiveState" Value="Disabled"/>
                            <Setter TargetName="arrow" Property="wss:StateManager.ActiveState" Value="Disabled"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type local:ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ToggleButton}">
                    <Border x:Name="border"
                            Background="{smk:ShowingProperty Property=Background}"
                            BorderBrush="{smk:ShowingProperty Property=BorderBrush}"
                            BorderThickness="{smk:ShowingProperty Property=BorderThickness}"
                            CornerRadius="{smk:ShowingProperty Property=CornerRadius}">
                        <local:BorderContentAdapter ClipToBounds="{TemplateBinding ClipToBounds}">
                            <Grid Background="Transparent" SnapsToDevicePixels="False"
                                  Margin="{smk:ShowingProperty Property=Padding}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Grid x:Name="circleAndArrow">
                                    <Grid.LayoutTransform>
                                        <TransformGroup>
                                            <TransformGroup.Children>
                                                <TransformCollection>
                                                    <RotateTransform Angle="180"/>
                                                </TransformCollection>
                                            </TransformGroup.Children>
                                        </TransformGroup>
                                    </Grid.LayoutTransform>
                                    <Ellipse x:Name="circle"
                                             VerticalAlignment="Center"
                                             HorizontalAlignment="Center"
                                             Width="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderCircleDiameter}"
                                             Height="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderCircleDiameter}"
                                             wss:StateManager.Stroke="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderCircleStroke}"
                                             wss:StateManager.HoverStroke="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderCircleHoverStroke}"
                                             wss:StateManager.PressedStroke="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderCirclePressedStroke}"
                                             wss:StateManager.CheckedStroke="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderCircleCheckedStroke}"
                                             wss:StateManager.DisabledStroke="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderCircleDisabledStroke}"
                                             wss:StateManager.Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderCircleFill}"
                                             wss:StateManager.HoverFill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderCircleHoverFill}"
                                             wss:StateManager.PressedFill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderCirclePressedFill}"
                                             wss:StateManager.CheckedFill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderCircleCheckedFill}"
                                             wss:StateManager.DisabledFill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderCircleDisabledFill}"
                                             wss:StateManager.DefaultTransitionDuration="0:0:0.200"
                                             wss:StateManager.HoverTransitionDuration="0:0:0.100"
                                             wss:StateManager.PressedTransitionDuration="0:0:0"
                                             Stroke="{Binding RelativeSource={RelativeSource Mode=Self},Path=(wss:StateManager.ShowingStroke)}"
                                             Fill="{Binding RelativeSource={RelativeSource Mode=Self},Path=(wss:StateManager.ShowingFill)}"/>
                                    <Path x:Name="arrow"
                                          HorizontalAlignment="Center"
                                          SnapsToDevicePixels="false"
                                          StrokeThickness="2"
                                          VerticalAlignment="Center"
                                          Data="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderArrowGeometry}"
                                          wss:StateManager.Stroke="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderArrowStroke}"
                                          wss:StateManager.HoverStroke="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderArrowHoverStroke}"
                                          wss:StateManager.PressedStroke="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderArrowPressedStroke}"
                                          wss:StateManager.CheckedStroke="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderArrowCheckedStroke}"
                                          wss:StateManager.DisabledStroke="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderArrowDisabledStroke}"
                                          wss:StateManager.DefaultTransitionDuration="0:0:0.200"
                                          wss:StateManager.HoverTransitionDuration="0:0:0.100"
                                          wss:StateManager.PressedTransitionDuration="0:0:0"
                                          Stroke="{Binding RelativeSource={RelativeSource Mode=Self},Path=(wss:StateManager.ShowingStroke)}"/>
                                </Grid>
                                <FrameworkElement x:Name="spacer"
                                                  Grid.Column="1"
                                                  Width="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderSpacing}"/>
                                <ContentPresenter x:Name="contentPresenter" Grid.Column="2"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  RecognizesAccessKey="True" SnapsToDevicePixels="True" />
                            </Grid>
                        </local:BorderContentAdapter>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=local:Expander},Path=HeaderIconPosition}"
                                     Value="{x:Static local:ExpanderHeaderIconPosition.End}">
                            <Setter Property="Grid.Column" TargetName="circleAndArrow" Value="4"/>
                            <Setter Property="Grid.Column" TargetName="spacer" Value="3"/>
                        </DataTrigger>

                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="wss:StateManager.ActiveState" Value="Hover"/>
                            <Setter TargetName="circle" Property="wss:StateManager.ActiveState" Value="Hover"/>
                            <Setter TargetName="arrow" Property="wss:StateManager.ActiveState" Value="Hover"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="wss:StateManager.ActiveState" Value="Pressed"/>
                            <Setter TargetName="circle" Property="wss:StateManager.ActiveState" Value="Pressed"/>
                            <Setter TargetName="arrow" Property="wss:StateManager.ActiveState" Value="Pressed"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="wss:StateManager.ActiveState" Value="Checked"/>
                            <Setter TargetName="circle" Property="wss:StateManager.ActiveState" Value="Checked"/>
                            <Setter TargetName="arrow" Property="wss:StateManager.ActiveState" Value="Checked"/>
                            <Setter Property="Data" TargetName="arrow" >
                                <Setter.Value>
                                    <MultiBinding Converter="{x:Static ws:FallbackConverter.Instance}">
                                        <Binding RelativeSource="{RelativeSource Mode=FindAncestor,AncestorType=local:Expander}" Path="HeaderArrowExpandedGeometry"/>
                                        <Binding RelativeSource="{RelativeSource Mode=FindAncestor,AncestorType=local:Expander}" Path="HeaderArrowGeometry"/>
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="wss:StateManager.ActiveState" Value="Disabled"/>
                            <Setter TargetName="circle" Property="wss:StateManager.ActiveState" Value="Disabled"/>
                            <Setter TargetName="arrow" Property="wss:StateManager.ActiveState" Value="Disabled"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type local:ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ToggleButton}">
                    <Border x:Name="border"
                            Background="{smk:ShowingProperty Property=Background}"
                            BorderBrush="{smk:ShowingProperty Property=BorderBrush}"
                            BorderThickness="{smk:ShowingProperty Property=BorderThickness}"
                            CornerRadius="{smk:ShowingProperty Property=CornerRadius}">
                        <local:BorderContentAdapter ClipToBounds="{TemplateBinding ClipToBounds}">
                            <Grid Background="Transparent" SnapsToDevicePixels="False"
                                  Margin="{smk:ShowingProperty Property=Padding}">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <Grid x:Name="circleAndArrow">
                                    <Grid.LayoutTransform>
                                        <TransformGroup>
                                            <TransformGroup.Children>
                                                <TransformCollection>
                                                    <RotateTransform Angle="90"/>
                                                </TransformCollection>
                                            </TransformGroup.Children>
                                        </TransformGroup>
                                    </Grid.LayoutTransform>
                                    <Ellipse x:Name="circle"
                                             VerticalAlignment="Center"
                                             HorizontalAlignment="Center"
                                             Width="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderCircleDiameter}"
                                             Height="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderCircleDiameter}"
                                             wss:StateManager.Stroke="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderCircleStroke}"
                                             wss:StateManager.HoverStroke="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderCircleHoverStroke}"
                                             wss:StateManager.PressedStroke="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderCirclePressedStroke}"
                                             wss:StateManager.CheckedStroke="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderCircleCheckedStroke}"
                                             wss:StateManager.DisabledStroke="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderCircleDisabledStroke}"
                                             wss:StateManager.Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderCircleFill}"
                                             wss:StateManager.HoverFill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderCircleHoverFill}"
                                             wss:StateManager.PressedFill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderCirclePressedFill}"
                                             wss:StateManager.CheckedFill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderCircleCheckedFill}"
                                             wss:StateManager.DisabledFill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderCircleDisabledFill}"
                                             wss:StateManager.DefaultTransitionDuration="0:0:0.200"
                                             wss:StateManager.HoverTransitionDuration="0:0:0.100"
                                             wss:StateManager.PressedTransitionDuration="0:0:0"
                                             Stroke="{Binding RelativeSource={RelativeSource Mode=Self},Path=(wss:StateManager.ShowingStroke)}"
                                             Fill="{Binding RelativeSource={RelativeSource Mode=Self},Path=(wss:StateManager.ShowingFill)}"/>
                                    <Path x:Name="arrow"
                                          HorizontalAlignment="Center"
                                          SnapsToDevicePixels="false"
                                          StrokeThickness="2"
                                          VerticalAlignment="Center"
                                          Data="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderArrowGeometry}"
                                          wss:StateManager.Stroke="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderArrowStroke}"
                                          wss:StateManager.HoverStroke="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderArrowHoverStroke}"
                                          wss:StateManager.PressedStroke="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderArrowPressedStroke}"
                                          wss:StateManager.CheckedStroke="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderArrowCheckedStroke}"
                                          wss:StateManager.DisabledStroke="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderArrowDisabledStroke}"
                                          wss:StateManager.DefaultTransitionDuration="0:0:0.200"
                                          wss:StateManager.HoverTransitionDuration="0:0:0.100"
                                          wss:StateManager.PressedTransitionDuration="0:0:0"
                                          Stroke="{Binding RelativeSource={RelativeSource Mode=Self},Path=(wss:StateManager.ShowingStroke)}"/>
                                </Grid>
                                <FrameworkElement x:Name="spacer"
                                                  Grid.Row="1"
                                                  Height="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderSpacing}"/>
                                <ContentPresenter x:Name="contentPresenter"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  RecognizesAccessKey="True" Grid.Row="2" SnapsToDevicePixels="True"/>
                            </Grid>
                        </local:BorderContentAdapter>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=local:Expander},Path=HeaderIconPosition}"
                                     Value="{x:Static local:ExpanderHeaderIconPosition.End}">
                            <Setter Property="Grid.Row" TargetName="circleAndArrow" Value="4"/>
                            <Setter Property="Grid.Row" TargetName="spacer" Value="3"/>
                        </DataTrigger>

                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="wss:StateManager.ActiveState" Value="Hover"/>
                            <Setter TargetName="circle" Property="wss:StateManager.ActiveState" Value="Hover"/>
                            <Setter TargetName="arrow" Property="wss:StateManager.ActiveState" Value="Hover"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="wss:StateManager.ActiveState" Value="Pressed"/>
                            <Setter TargetName="circle" Property="wss:StateManager.ActiveState" Value="Pressed"/>
                            <Setter TargetName="arrow" Property="wss:StateManager.ActiveState" Value="Pressed"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="wss:StateManager.ActiveState" Value="Checked"/>
                            <Setter TargetName="circle" Property="wss:StateManager.ActiveState" Value="Checked"/>
                            <Setter TargetName="arrow" Property="wss:StateManager.ActiveState" Value="Checked"/>
                            <Setter Property="Data" TargetName="arrow" >
                                <Setter.Value>
                                    <MultiBinding Converter="{x:Static ws:FallbackConverter.Instance}">
                                        <Binding RelativeSource="{RelativeSource Mode=FindAncestor,AncestorType=local:Expander}" Path="HeaderArrowExpandedGeometry"/>
                                        <Binding RelativeSource="{RelativeSource Mode=FindAncestor,AncestorType=local:Expander}" Path="HeaderArrowGeometry"/>
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="wss:StateManager.ActiveState" Value="Disabled"/>
                            <Setter TargetName="circle" Property="wss:StateManager.ActiveState" Value="Disabled"/>
                            <Setter TargetName="arrow" Property="wss:StateManager.ActiveState" Value="Disabled"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type local:ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ToggleButton}">
                    <Border x:Name="border"
                            Background="{smk:ShowingProperty Property=Background}"
                            BorderBrush="{smk:ShowingProperty Property=BorderBrush}"
                            BorderThickness="{smk:ShowingProperty Property=BorderThickness}"
                            CornerRadius="{smk:ShowingProperty Property=CornerRadius}">
                        <local:BorderContentAdapter ClipToBounds="{TemplateBinding ClipToBounds}">
                            <Grid Background="Transparent" SnapsToDevicePixels="False"
                                  Margin="{smk:ShowingProperty Property=Padding}">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <Grid x:Name="circleAndArrow">
                                    <Grid.LayoutTransform>
                                        <TransformGroup>
                                            <TransformGroup.Children>
                                                <TransformCollection>
                                                    <RotateTransform Angle="-90"/>
                                                </TransformCollection>
                                            </TransformGroup.Children>
                                        </TransformGroup>
                                    </Grid.LayoutTransform>
                                    <Ellipse x:Name="circle"
                                             VerticalAlignment="Center"
                                             HorizontalAlignment="Center"
                                             Width="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderCircleDiameter}"
                                             Height="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderCircleDiameter}"
                                             wss:StateManager.Stroke="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderCircleStroke}"
                                             wss:StateManager.HoverStroke="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderCircleHoverStroke}"
                                             wss:StateManager.PressedStroke="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderCirclePressedStroke}"
                                             wss:StateManager.CheckedStroke="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderCircleCheckedStroke}"
                                             wss:StateManager.DisabledStroke="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderCircleDisabledStroke}"
                                             wss:StateManager.Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderCircleFill}"
                                             wss:StateManager.HoverFill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderCircleHoverFill}"
                                             wss:StateManager.PressedFill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderCirclePressedFill}"
                                             wss:StateManager.CheckedFill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderCircleCheckedFill}"
                                             wss:StateManager.DisabledFill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderCircleDisabledFill}"
                                             wss:StateManager.DefaultTransitionDuration="0:0:0.200"
                                             wss:StateManager.HoverTransitionDuration="0:0:0.100"
                                             wss:StateManager.PressedTransitionDuration="0:0:0"
                                             Stroke="{Binding RelativeSource={RelativeSource Mode=Self},Path=(wss:StateManager.ShowingStroke)}"
                                             Fill="{Binding RelativeSource={RelativeSource Mode=Self},Path=(wss:StateManager.ShowingFill)}"/>
                                    <Path x:Name="arrow"
                                          HorizontalAlignment="Center"
                                          SnapsToDevicePixels="false"
                                          StrokeThickness="2"
                                          VerticalAlignment="Center"
                                          Data="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderArrowGeometry}"
                                          wss:StateManager.Stroke="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderArrowStroke}"
                                          wss:StateManager.HoverStroke="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderArrowHoverStroke}"
                                          wss:StateManager.PressedStroke="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderArrowPressedStroke}"
                                          wss:StateManager.CheckedStroke="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderArrowCheckedStroke}"
                                          wss:StateManager.DisabledStroke="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderArrowDisabledStroke}"
                                          wss:StateManager.DefaultTransitionDuration="0:0:0.200"
                                          wss:StateManager.HoverTransitionDuration="0:0:0.100"
                                          wss:StateManager.PressedTransitionDuration="0:0:0"
                                          Stroke="{Binding RelativeSource={RelativeSource Mode=Self},Path=(wss:StateManager.ShowingStroke)}"/>
                                </Grid>
                                <FrameworkElement x:Name="spacer"
                                                  Grid.Row="1"
                                                  Height="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:Expander},Path=HeaderSpacing}"/>
                                <ContentPresenter x:Name="contentPresenter"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  Margin="0,4,0,0" RecognizesAccessKey="True" Grid.Row="2" SnapsToDevicePixels="True" />
                            </Grid>
                        </local:BorderContentAdapter>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=local:Expander},Path=HeaderIconPosition}"
                                     Value="{x:Static local:ExpanderHeaderIconPosition.End}">
                            <Setter Property="Grid.Row" TargetName="circleAndArrow" Value="4"/>
                            <Setter Property="Grid.Row" TargetName="spacer" Value="3"/>
                        </DataTrigger>

                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="wss:StateManager.ActiveState" Value="Hover"/>
                            <Setter TargetName="circle" Property="wss:StateManager.ActiveState" Value="Hover"/>
                            <Setter TargetName="arrow" Property="wss:StateManager.ActiveState" Value="Hover"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="wss:StateManager.ActiveState" Value="Pressed"/>
                            <Setter TargetName="circle" Property="wss:StateManager.ActiveState" Value="Pressed"/>
                            <Setter TargetName="arrow" Property="wss:StateManager.ActiveState" Value="Pressed"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="wss:StateManager.ActiveState" Value="Checked"/>
                            <Setter TargetName="circle" Property="wss:StateManager.ActiveState" Value="Checked"/>
                            <Setter TargetName="arrow" Property="wss:StateManager.ActiveState" Value="Checked"/>
                            <Setter Property="Data" TargetName="arrow" >
                                <Setter.Value>
                                    <MultiBinding Converter="{x:Static ws:FallbackConverter.Instance}">
                                        <Binding RelativeSource="{RelativeSource Mode=FindAncestor,AncestorType=local:Expander}" Path="HeaderArrowExpandedGeometry"/>
                                        <Binding RelativeSource="{RelativeSource Mode=FindAncestor,AncestorType=local:Expander}" Path="HeaderArrowGeometry"/>
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="wss:StateManager.ActiveState" Value="Disabled"/>
                            <Setter TargetName="circle" Property="wss:StateManager.ActiveState" Value="Disabled"/>
                            <Setter TargetName="arrow" Property="wss:StateManager.ActiveState" Value="Disabled"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type local:Expander}">
        <Setter Property="HeaderCornerRadius" Value="3"/>
        <Setter Property="HeaderForeground" Value="{Binding RelativeSource={RelativeSource Mode=Self},Path=Foreground}"/>
        <Setter Property="HeaderCircleStroke" Value="#FF333333"/>
        <Setter Property="HeaderCircleFill" Value="#FFFFFFFF"/>
        <Setter Property="HeaderArrowStroke" Value="#FF333333"/>
        <Setter Property="HeaderCircleHoverStroke" Value="#FF5593FF"/>
        <Setter Property="HeaderCircleHoverFill" Value="#FFF3F9FF"/>
        <Setter Property="HeaderArrowHoverStroke" Value="#FF000000"/>
        <Setter Property="HeaderCirclePressedStroke" Value="#FF3C77DD"/>
        <Setter Property="HeaderCirclePressedFill" Value="#FFD9ECFF"/>
        <Setter Property="HeaderArrowPressedStroke" Value="#FF000000"/>
        <Setter Property="HeaderCircleDisabledStroke" Value="#FFBCBCBC"/>
        <Setter Property="HeaderCircleDisabledFill" Value="#FFE6E6E6"/>
        <Setter Property="HeaderArrowDisabledStroke" Value="#FF707070"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HeaderCircleDiameter" Value="19"/>
        <Setter Property="HeaderArrowGeometry" Value="M 1,1.5 L 4.5,5 L 8,1.5"/>
        <Setter Property="HeaderArrowExpandedGeometry" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HeaderMargin" Value="1"/>
        <Setter Property="CornerRadius" Value="3"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:Expander}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding CornerRadius}"
                            SnapsToDevicePixels="true">
                        <DockPanel>
                            <local:ToggleButton x:Name="HeaderSite"
                                                ContentTemplate="{TemplateBinding HeaderTemplate}"
                                                Content="{TemplateBinding Header}"
                                                ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                                DockPanel.Dock="Top"
                                                FontStretch="{TemplateBinding FontStretch}"
                                                FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}"
                                                FontStyle="{TemplateBinding FontStyle}"
                                                FontFamily="{TemplateBinding FontFamily}"
                                                FontWeight="{TemplateBinding FontWeight}"
                                                FontSize="{TemplateBinding FontSize}"
                                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                                Margin="{TemplateBinding HeaderMargin}"
                                                MinWidth="0" MinHeight="0"
                                                Style="{StaticResource ExpanderDownHeaderStyle}"
                                                wss:StateManager.Background="{TemplateBinding HeaderBackground}"
                                                wss:StateManager.Foreground="{TemplateBinding HeaderForeground}"
                                                wss:StateManager.BorderBrush="{TemplateBinding HeaderBorderBrush}"
                                                wss:StateManager.Padding="{TemplateBinding HeaderPadding}"
                                                wss:StateManager.BorderThickness="{TemplateBinding HeaderBorderThickness}"
                                                wss:StateManager.CornerRadius="{TemplateBinding HeaderCornerRadius}"
                                                wss:StateManager.HoverBackground="{TemplateBinding HeaderHoverBackground}"
                                                wss:StateManager.HoverForeground="{TemplateBinding HeaderHoverForeground}"
                                                wss:StateManager.HoverBorderBrush="{TemplateBinding HeaderHoverBorderBrush}"
                                                wss:StateManager.HoverPadding="{TemplateBinding HeaderHoverPadding}"
                                                wss:StateManager.HoverBorderThickness="{TemplateBinding HeaderHoverBorderThickness}"
                                                wss:StateManager.HoverCornerRadius="{TemplateBinding HeaderHoverCornerRadius}"
                                                wss:StateManager.PressedBackground="{TemplateBinding HeaderPressedBackground}"
                                                wss:StateManager.PressedForeground="{TemplateBinding HeaderPressedForeground}"
                                                wss:StateManager.PressedBorderBrush="{TemplateBinding HeaderPressedBorderBrush}"
                                                wss:StateManager.PressedPadding="{TemplateBinding HeaderPressedPadding}"
                                                wss:StateManager.PressedBorderThickness="{TemplateBinding HeaderPressedBorderThickness}"
                                                wss:StateManager.PressedCornerRadius="{TemplateBinding HeaderPressedCornerRadius}"
                                                wss:StateManager.CheckedBackground="{TemplateBinding HeaderCheckedBackground}"
                                                wss:StateManager.CheckedForeground="{TemplateBinding HeaderCheckedForeground}"
                                                wss:StateManager.CheckedBorderBrush="{TemplateBinding HeaderCheckedBorderBrush}"
                                                wss:StateManager.CheckedPadding="{TemplateBinding HeaderCheckedPadding}"
                                                wss:StateManager.CheckedBorderThickness="{TemplateBinding HeaderCheckedBorderThickness}"
                                                wss:StateManager.CheckedCornerRadius="{TemplateBinding HeaderCheckedCornerRadius}"
                                                wss:StateManager.DisabledBackground="{TemplateBinding HeaderDisabledBackground}"
                                                wss:StateManager.DisabledForeground="{TemplateBinding HeaderDisabledForeground}"
                                                wss:StateManager.DisabledBorderBrush="{TemplateBinding HeaderDisabledBorderBrush}"
                                                wss:StateManager.DisabledPadding="{TemplateBinding HeaderDisabledPadding}"
                                                wss:StateManager.DisabledBorderThickness="{TemplateBinding HeaderDisabledBorderThickness}"
                                                wss:StateManager.DisabledCornerRadius="{TemplateBinding HeaderDisabledCornerRadius}"/>
                            <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="Collapsed"/>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="true">
                            <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Right">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Up">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Left">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>